slug: active-directory-with-vault
id: fwyjcbe17y2c
type: track
title: Active Directory with Vault
teaser: Learn how to integrate Active Directory with Vault.
description: |-
  HashiCorp Vault neatly integrates with Active Directory (AD).

  Active Directory can be used as an authentication method so users can log in using their existing AD credentials and also groups can be used to assign policies. Policies are used to assign permissions to Users on what and how the can access data in Vault.

  There is also an Active Directory secret engine which has two main features.

  The first feature (password rotation) is where the AD secrets engine rotates AD passwords dynamically. This is designed for a high-load environment where many instances may be accessing a shared password simultaneously.

  The second feature (service account check-out) is where a library of service accounts can be checked out by a person or by machines. Vault will automatically rotate the password each time a service account is checked in. Service accounts can be voluntarily checked in, or Vault will check them in when their lending period (or, "ttl", in Vault's language) ends.
icon: https://storage.googleapis.com/instruqt-frontend/assets/hashicorp/tracks/vault.png
tags:
- vault
- auth-method
- secrets
- ldap
- active directory
owner: hashicorp
developers:
- tarenz@hashicorp.com
private: true
published: true
challenges:
- slug: set-up-active-directory-authentication
  id: n4grgvxdvsfb
  type: challenge
  title: Set up Active Directory authentication
  teaser: Configure Vault so that users can authenticate using their AD credentials.
  assignment: |-
    1. Log in as Vault root token.

    ```bash
    vault login root
    ```

    2. Create LDAP auth method.

    ```bash
    vault auth enable ldap
    ```

    3. Set LDAP config.

    ```bash
    vault write auth/ldap/config \
          binddn="cn=vault-bind,cn=Users,dc=hashicorp,dc=example" \
          bindpass="P@ssword1" \
          url="ldap://dc:389" \
          userdn="cn=Users,dc=hashicorp,dc=example" \
          userattr="sAMAccountName" \
          groupdn="cn=Users,dc=hashicorp,dc=example" \
          groupattr="cn"
    ```

    4. Assign admins group.

    ```bash
    vault write auth/ldap/groups/security policies=security
    ```

    5. Assign users group.

    ```bash
    vault write auth/ldap/groups/engineering policies=engineering
    ```

    6. Log in as 'alice' to check the configuration is correct and working.

    ```bash
    vault login -method=ldap username=alice password=P@ssword1
    ```
  notes:
  - type: text
    contents: Set up Active Directory authentication.
  tabs:
  - title: Vault CLI
    type: terminal
    hostname: vault
  - title: Vault UI
    type: service
    hostname: vault
    port: 8200
  - title: Policies
    type: code
    hostname: vault
    path: /tmp/policies
  difficulty: basic
  timelimit: 300
- slug: log-in-to-vault-using-active-directory
  id: tglkaayuktaq
  type: challenge
  title: Log in to Vault using Active Directory
  teaser: See how users log on to Vault using their AD credentials and how access
    changes based on group memberships.
  assignment: |-
    This challenge is special. While we walk you through this challenge using the CLI feel free to solve it using the UI.

    The password for all accounts is P@ssword1

    1. Log in to Vault as Active Directory user 'alice'.

    ```bash
    vault login -method=ldap username=alice password=P@ssword1
    ```

    Alice is part of the security team and has full access to Vault.
    Try to list secrets and read values within the 'security' and 'engineering' section of the key-value store.

    2. List all secrets on the root level of the key-value store.

    ```bash
    vault list secret
    ```

    3. List all secrets on the 'security' level of the key-value store.

    ```bash
    vault list secret/security
    ```

    4. Read values in the 'my-secret' level.

    ```bash
    vault read secret/security/my-secret
    ```

    5. Read values from a secret in the engineering section.

    ```bash
    vault read secret/engineering/my-application
    ```

    As you can see 'alice' has full access to everything in the key-value store.
    Let's see what access 'bob' has.

    6. Log in to Vault as Active Directory user 'bob'.

    ```bash
    vault login -method=ldap username=bob password=P@ssword1
    ```

    7. List all secrest on the root level.

    ```bash
    vault list secret
    ```

    As you can see 'bob' is also able to list all folder at the root level.

    8. However, try to read a secret in the 'secret' section.

    ```bash
    vault read secret/security/my-secret
    ```

    'Bob' is not allowed to read anything from the 'secret' section.
    He can however read and create secrets within the 'engineering' section.

    9. Read the 'my-application' secret.

    ```bash
    vault read secret/engineering/my-application
    ```

    10. Now create a new secret with the name 'new-application' and the key 'my-value' and a value of your choice.

    ```bash
    vault write secret/engineering/new-application my-value=some-value
    ```
  notes:
  - type: text
    contents: Log in to Vault using Active Directory.
  tabs:
  - title: Vault CLI
    type: terminal
    hostname: vault
  - title: Vault UI
    type: service
    hostname: vault
    port: 8200
  - title: Policies
    type: code
    hostname: vault
    path: /tmp/policies
  difficulty: basic
  timelimit: 600
- slug: service-account-check-out
  id: rj38stqptyay
  type: challenge
  title: Service Account Check-Out
  teaser: Vault supports PAM-like functionality to check in/out service accounts.
  assignment: |-
    1. Log in to Vault as Active Directory user 'alice'.

    ```bash
    vault login -method=ldap username=alice password=P@ssword1
    ```

    2. Enable the Active Directory secret engine

    ```bash
    vault secrets enable ad
    ```

    3. Configure the secret engine

    ```bash
    vault write ad/config \
          binddn="cn=vault-reset,cn=Users,dc=hashicorp,dc=example" \
          bindpass=P@ssword1 \
          url=ldaps://dc:636 \
          userdn="dc=hashicorp,dc=example" \
          insecure_tls=true
    ```

    4. Create a new configuration for the service account check-out functionality.

    ```bash
    vault write ad/library/domain-admins \
      service_account_names=privileged-account@hashicorp.example \
      ttl=1h \
      max_ttl=8h \
      disable_check_in_enforcement=false
    ```

    5. Now, try to check out the account.

    ```bash
    vault write ad/library/domain-admins/check-out ttl=30m
    ```

    As you can see you get the credentials including the password. The account is now checked out for an hour based on the TTL of 1h.

    6. Try to check out the account again.

    ```bash
    vault write -f ad/library/domain-admins/check-out
    ```

    The error message you get is expected. As only one account is part of the check-out configuration and it is already checked out another check out is not possible.

    7. As you are finished with your work now check the account in.

    ```bash
    vault write -f ad/library/domain-admins/check-in
    ```
  notes:
  - type: text
    contents: Service Account Check-Out.
  tabs:
  - title: Vault CLI
    type: terminal
    hostname: vault
  - title: Vault UI
    type: service
    hostname: vault
    port: 8200
  - title: Policies
    type: code
    hostname: vault
    path: /tmp/policies
  difficulty: basic
  timelimit: 600
- slug: service-account-password-rotation
  id: dfab4rcvmoao
  type: challenge
  title: Service account password rotation
  teaser: See how the AD secrets engine rotates AD passwords dynamically.
  assignment: |-
    1. Log in to Vault as Active Directory user 'alice'.

    ```bash
    vault login -method=ldap username=alice password=P@ssword1
    ```

    2. Create a role to rotate the password for the service account my-application@hashicorp.example.

    ```bash
    vault write ad/roles/my-application \
          service_account_name="my-application@hashicorp.example" \
          ttl=15s \
          max_ttl=30s
    ```

    3. Read service account credentials

    ```bash
    vault read ad/creds/my-application
    ```

    Try to read the credentials again within 15 seconds and you will get the same password.
    As the TTL is 15s, if you try to read the password after 15 seconds you will get a new one as the password is automatically rotated.
  notes:
  - type: text
    contents: Service account password rotation.
  tabs:
  - title: Vault CLI
    type: terminal
    hostname: vault
  - title: Vault UI
    type: service
    hostname: vault
    port: 8200
  - title: Policies
    type: code
    hostname: vault
    path: /tmp/policies/my-application-policy.hcl
  difficulty: basic
  timelimit: 300
checksum: "8145439087421035363"
